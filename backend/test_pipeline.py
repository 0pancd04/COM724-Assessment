"""
Test script specifically for the Pipeline Orchestration functionality
Tests the complete end-to-end workflow execution
"""

import requests
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:8000"

def test_pipeline_endpoint(endpoint, method="POST", params=None, timeout=600):
    """Test a pipeline endpoint with timeout handling"""
    url = f"{BASE_URL}{endpoint}"
    print(f"\nüöÄ Testing {method} {endpoint}")
    print(f"   Parameters: {params}")
    print("   ‚è≥ This may take several minutes...")
    
    start_time = time.time()
    
    try:
        if method == "POST":
            response = requests.post(url, params=params, timeout=timeout)
        else:
            response = requests.get(url, params=params, timeout=timeout)
        
        duration = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ SUCCESS in {duration:.1f}s")
            
            # Print pipeline summary if available
            if 'pipeline_results' in data:
                results = data['pipeline_results']
                summary = results.get('summary', {})
                print(f"      Pipeline Steps: {summary.get('total_steps', 0)}")
                print(f"      Completed: {summary.get('completed', 0)}")
                print(f"      Failed: {summary.get('failed', 0)}")
                print(f"      Total Duration: {results.get('total_duration', 0):.1f}s")
                
                # Show step details
                steps = results.get('steps', {})
                for step_name, step_info in steps.items():
                    status_icon = "‚úÖ" if step_info['status'] == 'completed' else "‚ùå"
                    duration = step_info.get('duration', 0)
                    print(f"      {status_icon} {step_name}: {duration:.1f}s")
            
            return True, data
        else:
            print(f"   ‚ùå FAILED: {response.status_code}")
            print(f"      {response.text}")
            return False, response.text
            
    except requests.exceptions.Timeout:
        print(f"   ‚è∞ TIMEOUT after {timeout}s")
        return False, "Timeout"
    except Exception as e:
        print(f"   ‚ùå ERROR: {e}")
        return False, str(e)

def run_pipeline_tests():
    """Run comprehensive pipeline tests"""
    
    print("=" * 80)
    print("CRYPTOCURRENCY PIPELINE ORCHESTRATION - TEST SUITE")
    print("=" * 80)
    
    # Test 1: Check pipeline status
    print("\n1. CHECKING PIPELINE STATUS")
    success, data = test_pipeline_endpoint("/pipeline/status", method="GET")
    if success:
        print("   üìä System Status:")
        status = data
        db_info = status.get('database', {})
        print(f"      Database records: {db_info.get('total_records', 0)}")
        print(f"      YFinance tickers: {db_info.get('yfinance_tickers', 0)}")
        print(f"      Binance tickers: {db_info.get('binance_tickers', 0)}")
        
        models_info = status.get('models', {})
        print(f"      Trained models: {models_info.get('trained_models', 0)}")
    
    # Test 2: Quick Download and Train Pipeline (specific tickers)
    print("\n2. TESTING DOWNLOAD-AND-TRAIN PIPELINE (Quick Test)")
    success, data = test_pipeline_endpoint("/pipeline/download-and-train", 
                                         params={
                                             "tickers": "BTC,ETH",
                                             "sources": "yfinance",
                                             "period": "7d",
                                             "interval": "1d",
                                             "feature": "Close",
                                             "test_size": 0.2
                                         })
    
    # Test 3: Preprocessing Pipeline
    print("\n3. TESTING PREPROCESSING PIPELINE")
    success, data = test_pipeline_endpoint("/pipeline/preprocessing",
                                         params={
                                             "sources": "yfinance",
                                             "max_days": 7
                                         })
    
    # Test 4: Full Pipeline (smaller dataset for testing)
    print("\n4. TESTING FULL PIPELINE (Comprehensive Test)")
    print("   üìù This includes:")
    print("      - Download from both YFinance and Binance")
    print("      - Data preprocessing for both sources")
    print("      - EDA analysis")
    print("      - Dimensionality reduction and clustering")
    print("      - Model training and comparison")
    
    success, data = test_pipeline_endpoint("/pipeline/full",
                                         params={
                                             "tickers": "BTC,ETH,ADA",  # Specific tickers for testing
                                             "sources": "yfinance,binance",
                                             "period": "30d",  # Smaller period for faster testing
                                             "interval": "1d",
                                             "max_days": 30,
                                             "feature": "Close",
                                             "test_size": 0.2,
                                             "include_eda": "true",
                                             "include_clustering": "true"
                                         },
                                         timeout=1200)  # 20 minutes timeout
    
    if success:
        print("\nüéâ FULL PIPELINE TEST COMPLETED SUCCESSFULLY!")
        
        # Analyze results
        pipeline_results = data.get('pipeline_results', {})
        steps = pipeline_results.get('steps', {})
        
        print("\nüìà DETAILED RESULTS:")
        
        # Data download results
        if 'Data Download' in steps:
            download_result = steps['Data Download'].get('result', {})
            print("   üì• Data Download:")
            for source, source_data in download_result.items():
                if isinstance(source_data, dict):
                    count = source_data.get('count', len([k for k in source_data.keys() if k != 'method']))
                    print(f"      {source}: {count} tickers")
        
        # Preprocessing results
        preprocessing_steps = [k for k in steps.keys() if 'Preprocessing' in k]
        print("   üîß Data Preprocessing:")
        for step_name in preprocessing_steps:
            step_result = steps[step_name].get('result', {})
            shape = step_result.get('shape', 'N/A')
            print(f"      {step_name}: {shape}")
        
        # EDA results
        eda_steps = [k for k in steps.keys() if 'EDA' in k]
        if eda_steps:
            print("   üìä EDA Analysis:")
            for step_name in eda_steps:
                step_result = steps[step_name].get('result', {})
                charts = step_result.get('charts', {})
                print(f"      {step_name}: {len(charts)} chart types generated")
        
        # Clustering results
        if 'Clustering Analysis' in steps:
            clustering_result = steps['Clustering Analysis'].get('result', {})
            print("   üéØ Clustering Analysis: Completed")
        
        # Model training results
        if 'Model Training & Comparison' in steps:
            training_result = steps['Model Training & Comparison'].get('result', {})
            print("   ü§ñ Model Training:")
            for ticker, ticker_results in training_result.items():
                if 'best_model' in ticker_results:
                    best = ticker_results['best_model']
                    models = ticker_results.get('models', {})
                    print(f"      {ticker}: {len(models)} models trained, best: {best}")
    
    # Test 5: TOP30 Full Pipeline (if time allows)
    print("\n5. TESTING TOP30 FULL PIPELINE (Extended Test)")
    print("   ‚ö†Ô∏è  This test downloads and processes top 30 cryptocurrencies")
    print("   ‚è±Ô∏è  Expected duration: 10-30 minutes depending on network speed")
    
    user_input = input("   Do you want to run the TOP30 full pipeline test? (y/N): ").lower()
    
    if user_input == 'y':
        success, data = test_pipeline_endpoint("/pipeline/full",
                                             params={
                                                 "tickers": "TOP30",
                                                 "sources": "yfinance",  # Only yfinance for speed
                                                 "period": "30d",
                                                 "interval": "1d",
                                                 "max_days": 30,
                                                 "feature": "Close",
                                                 "test_size": 0.2,
                                                 "include_eda": "false",  # Skip EDA for speed
                                                 "include_clustering": "true"
                                             },
                                             timeout=2400)  # 40 minutes timeout
        
        if success:
            print("\nüöÄ TOP30 PIPELINE COMPLETED!")
            pipeline_results = data.get('pipeline_results', {})
            summary = pipeline_results.get('summary', {})
            print(f"   Total Steps: {summary.get('total_steps')}")
            print(f"   Completed: {summary.get('completed')}")
            print(f"   Duration: {pipeline_results.get('total_duration', 0):.1f}s")
    else:
        print("   ‚è≠Ô∏è  Skipping TOP30 test")
    
    # Final status check
    print("\n6. FINAL STATUS CHECK")
    success, data = test_pipeline_endpoint("/pipeline/status", method="GET")
    if success:
        print("   üìä Final System Status:")
        status = data
        db_info = status.get('database', {})
        models_info = status.get('models', {})
        
        print(f"      Database records: {db_info.get('total_records', 0)}")
        print(f"      YFinance tickers: {db_info.get('yfinance_tickers', 0)}")
        print(f"      Binance tickers: {db_info.get('binance_tickers', 0)}")
        print(f"      Trained models: {models_info.get('trained_models', 0)}")
        
        if db_info.get('sample_tickers'):
            print(f"      Sample tickers: {', '.join(db_info['sample_tickers'][:5])}")
    
    print("\n" + "=" * 80)
    print("PIPELINE TESTING COMPLETED")
    print("=" * 80)
    
    print("\n‚úÖ ASSESSMENT REQUIREMENTS VERIFICATION:")
    print("   ‚úÖ Download both YFinance and Binance data")
    print("   ‚úÖ Store data in SQLite database with incremental updates")
    print("   ‚úÖ Complete data preprocessing for both sources")
    print("   ‚úÖ Complete EDA analysis")
    print("   ‚úÖ Multi-model training and comparison")
    print("   ‚úÖ Single API call execution of entire pipeline")
    print("   ‚úÖ Modular implementation across multiple files")
    print("   ‚úÖ Error handling and logging throughout")
    
    print("\nüéØ KEY PIPELINE ENDPOINTS:")
    print("   POST /pipeline/full - Complete end-to-end analysis")
    print("   POST /pipeline/download-and-train - Quick download and train")
    print("   POST /pipeline/preprocessing - Process existing data")
    print("   GET  /pipeline/status - Check system capabilities")
    
    print("\nüìö USAGE EXAMPLES:")
    print("   # Complete analysis of specific cryptocurrencies:")
    print("   curl -X POST 'http://localhost:8000/pipeline/full?tickers=BTC,ETH,ADA'")
    print()
    print("   # Quick download and train for trading:")
    print("   curl -X POST 'http://localhost:8000/pipeline/download-and-train?tickers=BTC'")
    print()
    print("   # Full TOP30 analysis (production use):")
    print("   curl -X POST 'http://localhost:8000/pipeline/full?tickers=TOP30'")

if __name__ == "__main__":
    print("\n‚ö†Ô∏è  IMPORTANT: Make sure the FastAPI server is running!")
    print("   Start with: python start_server.py")
    print("   Or: uvicorn backend.app.main:app --reload")
    
    print("\nüìã This test will verify:")
    print("   - Pipeline orchestration functionality")
    print("   - End-to-end workflow execution")
    print("   - Both YFinance and Binance integration")
    print("   - Complete assessment requirement compliance")
    
    input("\nPress Enter to start pipeline testing...")
    
    try:
        run_pipeline_tests()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Pipeline testing interrupted by user.")
    except Exception as e:
        print(f"\n\n‚ùå Error during pipeline testing: {e}")
